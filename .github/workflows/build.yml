name: CI/CD Pipeline Build and Deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io # GitHub Container Registry
  IMAGE_NAME: tomshr29/t29
  IMAGE_TAG: latest # Tag pour l'image Docker

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: tomshr29 # Nom d'utilisateur GitHub
          password: ${{ secrets.TOKEN_TOK }} # Utilisation du token GitHub

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push the Docker image to GitHub Container Registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }} # L'IP de ton serveur
          username: ${{ secrets.SERVER_USER }} # Utilisateur pour SSH
          key: ${{ secrets.SERVER_SSH_KEY }} # Clé SSH privée pour se connecter au serveur
          script: |
            # Pull de la dernière image Docker
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            # Arrêter et supprimer le conteneur existant si besoin
            echo "Arrêt et suppression du conteneur existant..."
            docker stop my_container || true  # Si le conteneur existe, on l'arrête
            docker rm my_container || true  # On le supprime s'il existe

            # Vérifier s'il y a un autre conteneur utilisant le port 3333 et le supprimer
            echo "Vérification du port 3333..."
            CONTAINER_ID=$(docker ps -q -f "publish=3333")
            if [ -n "$CONTAINER_ID" ]; then
                echo "Un autre conteneur utilise déjà le port 3333. Suppression..."
                docker stop $CONTAINER_ID
                docker rm $CONTAINER_ID
            fi

            # Démarrer le conteneur avec la nouvelle image sur le même port
            echo "Démarrage du nouveau conteneur sur le port 3333..."
            docker run -d \
              --name my_container \
              -p 3333:3333 \
              -e TZ=UTC \
              -e PORT=3333 \
              -e HOST=0.0.0.0 \
              -e LOG_LEVEL=info \
              -e NODE_ENV=production \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
